package com.ireslab.emc.serviceImpl;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.security.SecureRandom;

import org.apache.commons.codec.binary.Base32;
import org.apache.commons.codec.binary.Hex;
import org.ietf.tools.TOTP;
import org.springframework.stereotype.Service;

import com.ireslab.emc.service.EmcOtpService;

@Service
public class EmcOtpServiceImpl implements EmcOtpService{

	private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(EmcOtpServiceImpl.class);

	@Override
	public String getRandomSecretKey() {
		 SecureRandom random = new SecureRandom();
	        byte[] bytes = new byte[20];
	        random.nextBytes(bytes);
	        Base32 base32 = new Base32();
	        String secretKey = base32.encodeToString(bytes);
	        // make the secret key more human-readable by lower-casing and
	        // inserting spaces between each group of 4 characters
	        return secretKey.toLowerCase().replaceAll("(.{4})(?=.{4})", "$1 ");
	}

	@Override
	public String getGoogleAuthenticatorBarCode(String secretKey, String account, String issuer) {
		log.info("Google Authenticator BarCode for secretKey["+secretKey+"]");
        String normalizedBase32Key = secretKey.replace(" ", "").toUpperCase();
        log.info("normalizedBase32Key : "+normalizedBase32Key);
        try {
            return "otpauth://totp/"
                + URLEncoder.encode(issuer + ":" + account, "UTF-8").replace("+", "%20")
                + "?secret=" + URLEncoder.encode(normalizedBase32Key, "UTF-8").replace("+", "%20")
                + "&issuer=" + URLEncoder.encode(issuer, "UTF-8").replace("+", "%20");
        } catch (UnsupportedEncodingException e) {
            throw new IllegalStateException(e);
        }
	}

	@Override
	public String getTOTPCode(String secretKey) {
		String normalizedBase32Key = secretKey.replace(" ", "").toUpperCase();
        Base32 base32 = new Base32();
        byte[] bytes = base32.decode(normalizedBase32Key);
        String hexKey = Hex.encodeHexString(bytes);
	
        long time = (System.currentTimeMillis() / 1000) / 30;
        String hexTime = Long.toHexString(time);
        return TOTP.generateTOTP(hexKey, hexTime, "6");
	}
	
	
	
	
	
	
	
	public static void main(String[] args) throws Exception {
		/*
		BclOTPServiveImpl b =new BclOTPServiveImpl();
        // required for generating the PNG file on a server with no graphics hardware
        System.setProperty("java.awt.headless", "true");

        String secretKey = b.getRandomSecretKey();
        String barCode = b.getGoogleAuthenticatorBarCode(secretKey, "nitinmalik2703@gmail.com", "");
        System.out.println(barCode);
        System.out.println("or by manually entering the secret key:\n");
        System.out.println(secretKey + "\n");
        System.out.println("Then verify that the 6 digit codes generated by Google Authenticator\n"
                + "are synchronized with the following (ctrl-c to exit at any time):\n");

        String lastCode = null;
        while (true) {
            String code = b.getTOTPCode(secretKey);
            if (!code.equals(lastCode)) {
                System.out.println("-------------------------------------------------------------: "+code);
            }
            lastCode = code;
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {};
        }*/

}}
